name: Export labels to Custom Vision

trigger: none

pool:
  vmImage: ubuntu-20.04

variables:
- group: vars

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'ARMSC'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
        echo '--- Installing required libraries ---'
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y
        pip install numpy pandas azure-cognitiveservices-vision-customvision tqdm pascal_voc_writer opencv-python-headless Pillow

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        cv_name=azodacv
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Loading dataset ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s $(dataset)/ -d "." --recursive

        echo '--- Transform into yolo annotation format ---'
        python src/auto_setup/tf_to_yolo_annotations.py --dataset $(dataset)

        echo '--- Get Custom Vision secret from keyvault ---'
        keyvault_name="azoda-kv-${subscription_id:0:12}"
        cv_key=$(echo $(az keyvault secret show --vault-name $keyvault_name --name cvkey | jq -r ".value"))
        echo $cv_key

        echo '--- Exporting dataset to Custom Vision project ---'
        cd src/auto_setup
        python upload_dataset_to_cv.py --subscription_id $subscription_id --resource_group $resource_group --key $cv_key --dataset $(dataset) --cv_name $cv_name