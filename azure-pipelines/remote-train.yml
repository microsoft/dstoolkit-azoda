name: Remote Model Training

trigger: none

pool:
  vmImage: ubuntu-20.04

variables:
- group: vars

steps:
- task: AzureCLI@2
  inputs:
    azureSubscription: 'ARMSC'
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
        echo '--- Set pipeline variables ---'
        model_name=$(model_name)
        if [ $model_name == yolov5 ]; then
          repo_id=ultralytics_yolov5
          git_url=https://github.com/ultralytics/yolov5
          git_commit_sha=fe7de6a82da3444d755453f86f40b508f3b99419
          dataset_yaml_dir=model_zoo/$repo_id/
        elif [ $model_name == yolov7 ]; then
          repo_id=wongkinyiu_yolov7
          git_url=https://github.com/WongKinYiu/yolov7.git
          git_commit_sha=2fdc7f14395f6532ad05fb3e6970150a6a83d290
          dataset_yaml_dir=model_zoo/$repo_id/$model_name/
        else
          if [ $model_name != yolov8 ]; then
            echo 'model_name not detected, defaulting to yolov8'
          fi
          repo_id=ultralytics_yolov8
          git_url=https://github.com/ultralytics/ultralytics.git
          git_commit_sha=59d43356644dd0df056e8d25cd5be92e0a1db88f
          dataset_yaml_dir=model_zoo/$repo_id/$model_name/
        fi

        echo '--- Installing required libraries ---'
        cd model_zoo/$repo_id
        git clone $git_url $model_name
        cd $model_name
        git checkout $git_commit_sha
        cd ../../..
        pip install --upgrade cython
        pip install -r requirements.txt
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        tenant_id=$(az account list --query "[?name=='$subscription_name'].tenantId | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")                                             
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Get dataset ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s $(dataset)/ -d . --recursive

        echo '--- Transform into yolo annotation format ---'
        python src/auto_setup/tf_to_yolo_annotations.py --dataset $(dataset) --model $model_name

        echo '--- Writing aml config.json ---'
        jq -n --arg subscription_id $subscription_id \
              --arg workspace_name $workspace_name \
              --arg resource_group $resource_group \
              '{"subscription_id": $subscription_id, "resource_group": $resource_group, "workspace_name": $workspace_name}' > config.json
        cat config.json
        
        cat $(dataset).yaml
        mv $(dataset).yaml $dataset_yaml_dir
        mv $(dataset) model_zoo/$repo_id/

        echo '--- Start remote training job ---'
        python src/auto_setup/start_yolo_aml_run.py --dataset $(dataset) \
                                                    --tenant_id $tenant_id \
                                                    --service_principal_id $(service_principal_id) \
                                                    --service_principal_password $(service_principal_password) \
                                                    --subscription_id $subscription_id \
                                                    --resource_group $resource_group \
                                                    --workspace_name $workspace_name \
                                                    --mode train \
                                                    --epochs $(epochs) \
                                                    --model_source $repo_id