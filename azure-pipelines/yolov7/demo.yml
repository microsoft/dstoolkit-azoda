name: Demo Flow

trigger: none

pool:
  vmImage: ubuntu-20.04

variables:
- group: vars

jobs:
- job: DemoPipeline
  timeoutInMinutes: 90
  steps:
  - task: AzureCLI@2
    displayName: Setup Infrastructure
    inputs:
      azureSubscription: 'ARMSC'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo '--- Setting variables ---'
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        tenant_id=$(az account list --query "[?name=='$subscription_name'].tenantId | [0]" | jq . -r)
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        location=westeurope
        acr_name=$(echo azoda$subscription_id | tr -d -)
        cv_name=azodacv
        keyvault_name="azoda-kv-${subscription_id:0:12}"
        cv_secret_name=cvkey

        echo '--- Installing required libraries ---'
        pip install azureml-sdk==1.39.0 numpy==1.22.3 opencv-python==4.5.5.62 pandas==1.4.1

        echo '--- Create resource group ---'
        az group create --name $resource_group --location $location

        echo '--- Create a container registry ---'
        az acr create --resource-group $resource_group --name $acr_name --sku Standard --admin-enabled true

        echo '--- Setting automatic yes to prompts ---'
        az config set extension.use_dynamic_install=yes_without_prompt

        echo '--- Creating a synthetic dataset ---'
        python src/auto_setup/synthetic_dataset_creation.py

        echo '--- Creating AML config ---'
        python src/auto_setup/write_aml_template_yaml.py --subscription $subscription_id --resource_group $resource_group --workspace $workspace_name --acr_name $acr_name

        echo '--- Creating AML Workspace ---'
        az extension add -n ml -y
        az ml workspace create -n $workspace_name -g $resource_group --file aml_config.yaml

        echo '--- Creating GPU compute instance ---'
        az ml compute create --min-instances 0 --max-instances 2 --name gpu-1 --size Standard_NC6 --workspace-name $workspace_name --resource-group $resource_group --no-wait --type AmlCompute --idle-time-before-scale-down 1800
        az ml compute update --name gpu-1 --resource-group $resource_group --workspace-name $workspace_name --min-instances 1
        az ml compute update --name gpu-1 --resource-group $resource_group --workspace-name $workspace_name --min-instances 0
        
        echo '--- Fetching AML storage account name ---'
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "[0].{account_name:account_name}.account_name")
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")

        echo '--- Fetching AML container name ---'
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Uploading synthetic dataset to AML container ---'
        az storage blob directory upload -c $aml_container --account-name $aml_storage_account_name -s 'synthetic_dataset/' -d '.' --recursive

        echo '--- Setting devops configuration ---'
        az devops configure --defaults organization=https://dev.azure.com/$(organization_name) project=$(project_name)
        
        echo '--- Creating Custom Vision resource ---'
        res=$(az cognitiveservices list --resource-group $resource_group --query "[?name=='$cv_name'].name | [0]" | jq . -r)
        if ((${#res}>0)); then   echo "Custom Vision resource already exists! Skipping step."; else   az cognitiveservices account create --name $cv_name --resource-group $resource_group --kind CustomVision.Training --sku F0 --location westeurope; fi
        
        echo '--- Getting Custom Vision key ---'
        key=$(az cognitiveservices account keys list --name $cv_name --resource-group $resource_group | jq -r ".key1")
        
        echo '--- Creating keyvault ---'
        az config set defaults.location=westeurope
        res=$(az keyvault list --resource-group $resource_group --query "[?name=='$keyvault_name'].name | [0]" | jq . -r)
        if ((${#res}>0))
        then
          echo "Keyvault resource already exists! Deleting previous version before resetting."
          az keyvault delete --name $keyvault_name --resource-group $resource_group
          az keyvault purge --name $keyvault_name
          az keyvault create --name $keyvault_name --resource-group $resource_group
        else
          az keyvault create --name $keyvault_name --resource-group $resource_group
        fi

        echo '--- Store Custom Vision secret in keyvault ---'
        az keyvault secret set --name $cv_secret_name --value $key --vault-name $keyvault_name
  - task: AzureCLI@2
    displayName: Export labels to Custom Vision
    inputs:
      azureSubscription: 'ARMSC'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo '--- Installing required libraries ---'
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y
        pip install numpy pandas azure-cognitiveservices-vision-customvision tqdm pascal_voc_writer opencv-python-headless Pillow

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        cv_name=azodacv
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Loading dataset ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s $(dataset)/ -d "." --recursive

        echo '--- Transform into yolo annotation format ---'
        python src/auto_setup/tf_to_yolo_annotations.py --dataset $(dataset)

        echo '--- Get Custom Vision secret from keyvault ---'
        keyvault_name="azoda-kv-${subscription_id:0:12}"
        cv_key=$(echo $(az keyvault secret show --vault-name $keyvault_name --name cvkey | jq -r ".value"))
        echo $cv_key

        echo '--- Exporting dataset to Custom Vision project ---'
        cd src/auto_setup
        python upload_dataset_to_cv.py --subscription_id $subscription_id --resource_group $resource_group --key $cv_key --dataset $(dataset) --cv_name $cv_name

        echo '--- Move filename mappings to dataset folder ---'
        az storage blob directory upload -c $aml_container --account-name $aml_storage_account_name -s "*.csv" -d '$(dataset)/datasets' --recursive

  - task: AzureCLI@2
    displayName: Yolov5 Remote Model Training
    inputs:
      azureSubscription: 'ARMSC'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo '--- Installing required libraries ---'
        cd model_zoo
        mkdir wongkinyiu_yolov7
        cd wongkinyiu_yolov7
        git clone https://github.com/WongKinYiu/yolov7.git
        cd yolov7
        git checkout 2fdc7f14395f6532ad05fb3e6970150a6a83d290
        cd ../../..
        
        pip install -r requirements.txt
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        tenant_id=$(az account list --query "[?name=='$subscription_name'].tenantId | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Get dataset ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s $(dataset)/ -d . --recursive

        echo '--- Transform into yolo annotation format ---'
        python src/auto_setup/tf_to_yolo_annotations.py --dataset $(dataset) --model yolov7

        echo '--- Writing aml config.json ---'
        jq -n --arg subscription_id $subscription_id \
              --arg workspace_name $workspace_name \
              --arg resource_group $resource_group \
              '{"subscription_id": $subscription_id, "resource_group": $resource_group, "workspace_name": $workspace_name}' > config.json
        cat config.json
        
        cat $(dataset).yaml
        mv $(dataset).yaml model_zoo/wongkinyiu_yolov7/yolov7/
        mv $(dataset) model_zoo/wongkinyiu_yolov7/

        echo '--- Start remote training job ---'
        python src/auto_setup/start_yolo_aml_run.py --dataset $(dataset) \
                                                    --tenant_id $tenant_id \
                                                    --service_principal_id $(service_principal_id) \
                                                    --service_principal_password $(service_principal_password) \
                                                    --subscription_id $subscription_id \
                                                    --resource_group $resource_group \
                                                    --workspace_name $workspace_name \
                                                    --mode train \
                                                    --epochs 40
  - task: AzureCLI@2
    displayName: Yolov5 Remote Model Testing
    inputs:
      azureSubscription: 'ARMSC'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo '--- Installing required libraries ---'
        cd model_zoo/wongkinyiu_yolov7
        git clone https://github.com/WongKinYiu/yolov7.git
        cd yolov7
        git checkout 2fdc7f14395f6532ad05fb3e6970150a6a83d290
        cd ../../..
        pip install -r requirements.txt
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        tenant_id=$(az account list --query "[?name=='$subscription_name'].tenantId | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Get dataset ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s $(dataset)/ -d . --recursive

        echo '--- Get latest model timestamp ---'
        latest_checkpoint=$(az storage blob directory list --account-name $aml_storage_account_name -c $aml_container -d yolov7_models --query "sort_by([].{name:name}[? contains(name, 'best.pt')], &name)"[-1].name)
        latest_timestamp=${latest_checkpoint:15:13}
        echo $latest_timestamp
        
        echo '--- Get model ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s yolov7_models/$latest_timestamp/exp/weights/ -d model_zoo/wongkinyiu_yolov7/loaded_weights/ --recursive

        echo '--- Transform into yolo annotation format ---'
        python src/auto_setup/tf_to_yolo_annotations.py --dataset $(dataset)
        
        mv $(dataset).yaml model_zoo/wongkinyiu_yolov7/yolov7/
        mv $(dataset) model_zoo/wongkinyiu_yolov7/

        echo '--- Start remote testing job ---'
        python src/auto_setup/start_yolo_aml_run.py --dataset $(dataset) \
                                                    --tenant_id $tenant_id \
                                                    --service_principal_id $(service_principal_id) \
                                                    --service_principal_password $(service_principal_password) \
                                                    --subscription_id $subscription_id \
                                                    --resource_group $resource_group \
                                                    --workspace_name $workspace_name \
                                                    --mode test \
                                                    --model_source wongkinyiu_yolov7
  - task: AzureCLI@2
    displayName: Yolov5 Remote Model Inferencing
    inputs:
      azureSubscription: 'ARMSC'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo '--- Installing required libraries ---'
        cd model_zoo/wongkinyiu_yolov7
        git clone https://github.com/WongKinYiu/yolov7.git
        cd yolov7
        git checkout 2fdc7f14395f6532ad05fb3e6970150a6a83d290
        cd ../../..
        pip install -r requirements.txt
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        tenant_id=$(az account list --query "[?name=='$subscription_name'].tenantId | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")
        echo 'aml_storage_account_name='$aml_storage_account_name
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")

        echo '--- Get dataset ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s $(dataset)/ -d . --recursive

        echo '--- Get latest model timestamp ---'
        latest_checkpoint=$(az storage blob directory list --account-name $aml_storage_account_name -c $aml_container -d yolov7_models --query "sort_by([].{name:name}[? contains(name, 'best.pt')], &name)"[-1].name)
        latest_timestamp=${latest_checkpoint:15:13}
        echo $latest_timestamp

        echo '--- Get model ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s yolov7_models/$latest_timestamp/exp/weights/best.pt -d model_zoo/wongkinyiu_yolov7/loaded_weights/best.pt

        echo '--- Transform into yolo annotation format ---'
        python src/auto_setup/tf_to_yolo_annotations.py --dataset $(dataset)

        mv $(dataset) model_zoo/wongkinyiu_yolov7/

        echo '--- Start remote inference job ---'
        python src/auto_setup/start_yolo_aml_run.py --dataset $(dataset) \
                                                    --tenant_id $tenant_id \
                                                    --service_principal_id $(service_principal_id) \
                                                    --service_principal_password $(service_principal_password) \
                                                    --subscription_id $subscription_id \
                                                    --resource_group $resource_group \
                                                    --workspace_name $workspace_name \
                                                    --mode infer \
                                                    --model_source wongkinyiu_yolov7
  - task: AzureCLI@2
    displayName: Yolov5 Model Deployment
    inputs:
      azureSubscription: 'ARMSC'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo '--- Installing required libraries ---'
        cd model_zoo/wongkinyiu_yolov7
        git clone https://github.com/WongKinYiu/yolov7.git
        cd yolov7
        git checkout 2fdc7f14395f6532ad05fb3e6970150a6a83d290
        cd ../../..
        pip install -r requirements.txt
        az config set extension.use_dynamic_install=yes_without_prompt
        az extension add -n ml -y

        echo '--- Setting variables ---'
        workspace_name=azoda-amlw
        resource_group=azoda-rg
        subscription_name="$(subscription_name)"
        subscription_id=$(az account list --query "[?name=='$subscription_name'].id | [0]" | jq . -r)
        tenant_id=$(az account list --query "[?name=='$subscription_name'].tenantId | [0]" | jq . -r)
        aml_storage_account_name_str=$(az ml datastore list --resource-group $resource_group --workspace-name $workspace_name --query "sort_by([].{account_name:account_name}[? contains(account_name, 'azoda')], &account_name)"[0].account_name)
        aml_storage_account_name=$(echo $aml_storage_account_name_str | tr -d \")
        aml_container_str=$(az ml datastore show --name workspaceblobstore --resource-group $resource_group --workspace-name $workspace_name --query container_name)
        aml_container=$(echo $aml_container_str | tr -d \")
        timestamp=$(date +%Y%m%d_%H%M%S)

        echo '--- Get latest model timestamp ---'
        latest_checkpoint=$(az storage blob directory list --account-name $aml_storage_account_name -c $aml_container -d yolov7_models --query "sort_by([].{name:name}[? contains(name, 'best.pt')], &name)"[-1].name)
        latest_timestamp=${latest_checkpoint:15:13}
        echo 'latest model='$latest_timestamp

        echo '--- Get model ---'
        az storage blob directory download -c $aml_container --account-name $aml_storage_account_name -s yolov7_models/$latest_timestamp/exp/weights/best.pt -d model_zoo/wongkinyiu_yolov7/

        echo '--- Start inference deployment ---'
        cd model_zoo/wongkinyiu_yolov7/
        python deploy_cpu_inference.py --tenant_id $tenant_id \
                                      --service_principal_id $(service_principal_id) \
                                      --service_principal_password $(service_principal_password) \
                                      --subscription_id $subscription_id \
                                      --resource_group $resource_group \
                                      --workspace_name $workspace_name \
                                      --dataset $(dataset)
